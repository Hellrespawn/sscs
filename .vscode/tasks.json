{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    // FIXME Port all tasks to Windows/Powershell
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Generate to-do",
            "type": "shell",
            "problemMatcher": [],
            "command": "sscs > tmp/todo.txt",
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "Clear test logs",
            "group": "test",
            "type": "shell",
            "problemMatcher": [],
            "command": "",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "rm -rf test/log",
            },

            "windows": {
                "command": "try { rm -r -fo -ErrorAction SilentlyContinue test\\log } finally { exit 0 }",
            }
        },
        {
            "label": "Clear tmp",
            "type": "shell",
            "problemMatcher": [],
            "command": "",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "rm -rf tmp",
            },

            "windows": {
                "command": "try { rm -r -fo -ErrorAction SilentlyContinue tmp } finally { exit 0 }",
            }
        },
        {
            "label": "Run tests",
            "group": "test",
            "type": "shell",
            "problemMatcher": [],
            "command": "",
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "poetry run pytest > tmp/test_stdout.txt 2> tmp/test.txt",
            },

            "windows": {
                "command": "Write-Host('\\\"Run tests\\\" is not supported on Windows.')",
            }
        },
        {
            "label": "Clean and format source code",
            "problemMatcher": [],
            "dependsOrder": "sequence",
            "dependsOn": [
                "clean __pycache__",
                "Clear test logs",
                "isort",
                "black",
                "Clear tmp"
            ],
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "black",
            "type": "shell",
            "problemMatcher": [],
            "command": "poetry run python -m black -l 78 .",
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "isort",
            "type": "shell",
            "problemMatcher": [],
            "command": "poetry run python -m isort . --float-to-top",
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "clean __pycache__",
            "type": "shell",
            "problemMatcher": [],
            "command": "",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete",
            },

            "windows": {  // FIXME Also delete __pycache__
                "command": "Get-ChildItem -Filter '*.pyc' -Force -Recurse | Remove-Item -Force; Get-ChildItem -Filter '__pycache__' -Force -Recurse | Remove-Item -Force",
            }
        },
        {
            "label": "Comprehensive linting",
            "problemMatcher": [],
            "dependsOrder": "sequence",
            "dependsOn": [
                "bandit",
                "pylint",
                "flake8",
                "mypy"
            ],
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "flake8",
            "type": "shell",
            "problemMatcher": [],
            "command": "poetry run python -m flake8 . > tmp/flake8.txt",
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "pylint",
            "type": "shell",
            "problemMatcher": [],
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "never"
            },
            "linux": {
                "command": "poetry run python -m pylint musictools > tmp/pylint.txt; poetry run python -m pylint test >> tmp/pylint.txt",
            },
            "windows": {
                "command": "try { poetry run python -m pylint musictools > tmp/pylint.txt; poetry run python -m pylint test >> tmp/pylint.txt } finally { exit 0 }",
            },
        },
        {
            "label": "bandit",
            "type": "shell",
            "problemMatcher": [],
            "command": "poetry run python -m bandit -c .bandit -r . > tmp/bandit.txt",
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "silent"
            }
        },
        {
            "label": "mypy",
            "type": "shell",
            "problemMatcher": [],
            "dependsOn": "tmp",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "poetry run mypy --ignore-missing-imports . > tmp/mypy.txt",
            },
            "windows": {
                "command": "try { poetry run mypy --ignore-missing-imports . > tmp/mypy.txt } finally { exit 0 }",
            }
        },
        {
            "label": "tmp",
            "type": "shell",
            "problemMatcher": [],
            "command": "",
            "presentation": {
                "reveal": "silent"
            },
            "linux": {
                "command": "mkdir -p tmp",
            },

            "windows": {
                "command": "mkdir -force tmp",
            }
        },

    ]
}
